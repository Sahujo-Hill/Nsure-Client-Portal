@page "/"
@using Microsoft.AspNetCore.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation

<AuthorizeView>

    <Authorized>
        <p>Sorry @context.User.Identity?.Name, you are already logged in with Microsoft.</p>
        <a href="MicrosoftIdentity/Account/SignOut">
            <button class="footerButton">Log out</button>
        </a>
        
    </Authorized>

    <NotAuthorized>

        <div class="frame"><!--Generic Frame used for all pages: FrameSTART -->

            <NsureProject.Components.Logo>

            </NsureProject.Components.Logo>

            <!--Nsure Login fields and button-->
            <div class="loginEntry">

                <p style="margin-bottom: 0px; margin-top: 100px" class="readex24">Username</p>
                <input class="loginInput"/>
                <p style="margin-bottom: 0px" class="readex24">Password</p>
                <input type="password" class="loginInput" />

                <NavLink style="text-decoration: none; margin-top: 30px; align-self: center" href="policySelect" Match="NavLinkMatch.All">
                    <button class="loginButton">Login</button>
                </NavLink>

                <div style="display: flex; justify-content: center; align-items: center;">
                    <div class="alternateLoginContainer">
                        <p style="margin: 0 0 10px 0; font-size: 16px; color: #333; font-family: Inter;">
                            Don't have an account setup?
                        </p>
                        <a href="MicrosoftIdentity/Account/SignIn">
                            <img src="/images/microsoftLogin.png" />
                        </a>
                    </div>
                </div>

            </div>


        </div> <!--Generic Frame used for all pages: FrameEND -->
    </NotAuthorized>

</AuthorizeView>



    @code {
        protected override async Task OnInitializedAsync()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/policySelect");
            }
        }
    }


